{"version":3,"sources":["App.js","serviceWorker.js","index.js","img/chevron-down.svg"],"names":["App","props","state","isOpen","current","page","this","setState","setTimeout","window","scrollTo","document","body","scrollHeight","jobDesc","vorpalClasses","jplClasses","skillsClasses","className","src","chevron","onClick","toggle","isOpened","id","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qSAmGeA,E,YA3Fb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,QAAQ,EACRC,QAAS,IAJK,E,oEAQXC,GACFC,KAAKJ,MAAME,UAAYC,GAAiB,KAATA,EAChCC,KAAKC,SAAS,CAACJ,QAAQ,EAAOC,QAAS,MAGvCE,KAAKC,SAAS,CAACJ,QAAQ,EAAMC,QAASC,IAEtCG,YAAW,WAAWC,OAAOC,SAAS,EAAGC,SAASC,KAAKC,gBAAgB,Q,+BAKlE,IAAD,OAEFC,EAAU,GACVC,EAAgB,aAChBC,EAAa,UACbC,EAAgB,aAEpB,OAAOX,KAAKJ,MAAME,SAChB,IAAK,SACHW,GAAiB,YACjBD,EAAU,yBAAKI,UAAU,WACvB,yBAAKA,UAAU,SAAf,2BACA,yBAAKA,UAAU,WAAf,wBACA,yBAAKA,UAAU,YAAf,2BACA,yBAAKA,UAAU,QAAf,gPAEF,MACF,IAAK,MACHF,GAAc,YACdF,EAAU,yBAAKI,UAAU,WACvB,yBAAKA,UAAU,SAAf,6BACA,yBAAKA,UAAU,WAAf,wCACA,yBAAKA,UAAU,YAAf,iCACA,yBAAKA,UAAU,QAAf,kXAKF,MACF,IAAK,SACHD,GAAiB,YACjBH,EAAU,yBAAKI,UAAU,WACzB,yBAAKA,UAAU,SAAf,SACA,yBAAKA,UAAU,QAAf,2HACA,6BACA,yBAAKA,UAAU,SAAf,UACA,yBAAKA,UAAU,QAAf,4QAMJ,OACE,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,gBADjB,cAGE,yBAAKA,UAAU,OAHjB,8BAKE,yBAAKA,UAAU,gBACf,yBAAKC,IAAKC,IAASF,UAAU,aAE/B,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,wDACb,yBAAKA,UAAWH,EAAeM,QAAS,kBAAM,EAAKC,OAAO,aAC1D,yBAAKJ,UAAWF,EAAYK,QAAS,kBAAM,EAAKC,OAAO,UACvD,yBAAKJ,UAAWD,EAAeI,QAAS,kBAAM,EAAKC,OAAO,YAA1D,qBAEF,kBAAC,WAAD,CAAUC,SAAUjB,KAAKJ,MAAMC,QAC7B,yBAAKqB,GAAG,WAAWN,UAAU,uBAC1BJ,W,GAlFCW,aCKEC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASqB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.d65c854f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n// import chevron from \"./chevron-down.svg\"\nimport chevron from \"./img/chevron-down.svg\"\nimport {Collapse} from 'react-collapse';\n\n// function App() {\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isOpen: false,\n      current: \"\"\n    };\n  }\n\n  toggle(page) {\n    if(this.state.current === page && page !== \"\"){\n      this.setState({isOpen: false, current: \"\"});\n    }\n    else{\n      this.setState({isOpen: true, current: page});\n      // setTimeout(function(){window.scrollTo(0,document.querySelector(\".collapse\").scrollHeight)},1);\n      setTimeout(function(){window.scrollTo(0, document.body.scrollHeight);},1000);\n      // document.getElementById(\"collapse\").scrollTop = document.getElementById(\"collapse\").scrollHeight\n    }\n  }\n\n  render(){\n\n    var jobDesc = \"\";\n    var vorpalClasses = \"job vorpal\";\n    var jplClasses = \"job jpl\";\n    var skillsClasses = \"job skills\";\n\n    switch(this.state.current){\n      case \"vorpal\":\n        vorpalClasses += \" selected\";\n        jobDesc = <div className=\"jobDesc\">\n          <div className=\"title\">Chief Executive Officer</div>\n          <div className=\"company\">Vorpal Entertainment</div>\n          <div className=\"duration\">Aug 2019 – Present</div>\n          <div className=\"desc\">Self-employed managing my own company currently designing and creating board games and video games. Experience spanning a number of areas including: management, advertising, design, planning, programming, editing, game theory, and art.</div>\n        </div>;\n        break;\n      case \"jpl\":\n        jplClasses += \" selected\";\n        jobDesc = <div className=\"jobDesc\">\n          <div className=\"title\">Web Application Developer</div>\n          <div className=\"company\">NASA Jet Propulsion Laboratory (JPL)</div>\n          <div className=\"duration\">April 2015 – August 2019</div>\n          <div className=\"desc\">Full stack development of complex internal web applications\n          Developed a web application to draw and save highlighted terrain data on hi-rise Mars images\n          Created a visitor management system for all of JPL that manages and tracks thousands of visits to JPL per day\n          Built a web application to view multiple sets of flight data at the same time on a zoomable time scale</div>\n        </div>\n        break;\n      case \"skills\":\n        skillsClasses += \" selected\";\n        jobDesc = <div className=\"jobDesc\">\n        <div className=\"title\">About</div>\n        <div className=\"desc\">Full stack web developer with a focus on frontend development and design and an interest in working in media and music.</div>\n        <br />\n        <div className=\"title\">Skills</div>\n        <div className=\"desc\">5+ years experience with developing browser based software and web pages through the use of HTML, CSS, Javascript, Python, Flask, Polymer, React, Redux, and jQuery.\n        Additionally, I have many years experience with using Unity3D and C# doing personal game projects.</div>\n        </div>\n        break;\n    }\n\n    return (\n      <div>\n        <div className=\"mainWrapper\">\n          <div className=\"main parallax me headerText\">\n            <div className=\"flex flex-1\"></div>\n            Zac Skinner\n            <div className=\"hr\"></div>\n            Frontend/Software Developer\n            <div className=\"flex flex-1\"></div>\n            <img src={chevron} className=\"chevron\" />\n          </div>\n          <div className=\"jobs flex flex-column bg-black\">\n            <div className=\"flex flex-row flex-around flex-fill bg-white jobText\">\n              <div className={vorpalClasses} onClick={() => this.toggle(\"vorpal\")}></div>\n              <div className={jplClasses} onClick={() => this.toggle(\"jpl\")}></div>\n              <div className={skillsClasses} onClick={() => this.toggle(\"skills\")}>About and Skills</div>\n            </div>\n            <Collapse isOpened={this.state.isOpen}>\n              <div id=\"collapse\" className=\"collapse normalText\">\n                {jobDesc}\n              </div>\n            </Collapse>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chevron-down.85cf0ba5.svg\";"],"sourceRoot":""}